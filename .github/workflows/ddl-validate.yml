name: DDL Validation

on:
  pull_request:
    paths:
      - 'nodes/**/schema/*.sql'
      - '.github/workflows/ddl-validate.yml'
  push:
    branches:
      - main
      - 'node-*'
    paths:
      - 'nodes/**/schema/*.sql'

jobs:
  validate-ddl:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Find SQL files
        id: find-sql
        run: |
          echo "Finding SQL files in nodes/*/schema/"
          find nodes -name "*.sql" -path "*/schema/*" -type f > sql_files.txt
          echo "Found SQL files:"
          cat sql_files.txt

      - name: Validate SQL syntax
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: test_user
          PGPASSWORD: test_pass
          PGDATABASE: test_db
        run: |
          set -e
          echo "Validating SQL files..."
          
          while IFS= read -r sql_file; do
            if [ -f "$sql_file" ]; then
              echo "Validating: $sql_file"
              
              # Test SQL syntax without executing
              psql -v ON_ERROR_STOP=1 -f "$sql_file" --single-transaction --set AUTOCOMMIT=off -c "ROLLBACK;" || {
                echo "❌ Validation failed for $sql_file"
                exit 1
              }
              
              echo "✅ $sql_file is valid"
            fi
          done < sql_files.txt
          
          echo "All SQL files validated successfully!"

      - name: Test UID generators
        if: contains(github.head_ref, 'node-1') || contains(github.ref, 'node-1')
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: test_user
          PGPASSWORD: test_pass
          PGDATABASE: test_db
        run: |
          echo "Testing UID generation functions..."
          
          # Apply schema
          psql -v ON_ERROR_STOP=1 -f nodes/node-1-company-db/schema/001_init.sql
          
          # Test company UID generation
          company_uid=$(psql -t -c "SELECT marketing.gen_company_uid();" | xargs)
          echo "Generated company UID: $company_uid"
          
          if [[ ! "$company_uid" =~ ^CO-[0-9]{8}-[0-9]{6}$ ]]; then
            echo "❌ Invalid company UID format"
            exit 1
          fi
          
          # Test slot UID generation
          slot_uid=$(psql -t -c "SELECT marketing.gen_slot_uid('$company_uid', 'CEO');" | xargs)
          echo "Generated slot UID: $slot_uid"
          
          if [[ ! "$slot_uid" =~ ^SL-CO-[0-9]{8}-[0-9]{6}-CEO$ ]]; then
            echo "❌ Invalid slot UID format"
            exit 1
          fi
          
          echo "✅ UID generators working correctly"

      - name: Test idempotency
        if: contains(github.head_ref, 'node-1') || contains(github.ref, 'node-1')
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: test_user
          PGPASSWORD: test_pass
          PGDATABASE: test_db
        run: |
          echo "Testing idempotent company insertion..."
          
          # First insertion
          result1=$(psql -t -c "SELECT marketing.insert_company_with_slots('Test Corp', 'test.com', 'apollo_test', '12-3456789');" | xargs)
          echo "First insertion: $result1"
          
          # Second insertion (should return exists)
          result2=$(psql -t -c "SELECT marketing.insert_company_with_slots('Test Corp', 'test.com', 'apollo_test', '12-3456789');" | xargs)
          echo "Second insertion: $result2"
          
          if [[ "$result2" != *"exists"* ]]; then
            echo "❌ Idempotency test failed"
            exit 1
          fi
          
          # Verify 3 slots created
          slot_count=$(psql -t -c "SELECT COUNT(*) FROM marketing.company_slot WHERE company_uid IN (SELECT company_uid FROM marketing.company WHERE website = 'test.com');" | xargs)
          
          if [ "$slot_count" -ne 3 ]; then
            echo "❌ Expected 3 slots, found $slot_count"
            exit 1
          fi
          
          echo "✅ Idempotency test passed"