name: ORBT Check

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  check-orbt-sections:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check PR template exists
        run: |
          if [ ! -f ".github/pull_request_template.md" ]; then
            echo "❌ PR template not found"
            exit 1
          fi
          echo "✅ PR template found"

      - name: Verify ORBT sections in template
        run: |
          echo "Checking for ORBT sections in PR template..."
          
          required_sections=("## Operate" "## Repair" "## Build" "## Train")
          template_file=".github/pull_request_template.md"
          
          for section in "${required_sections[@]}"; do
            if grep -q "$section" "$template_file"; then
              echo "✅ Found section: $section"
            else
              echo "❌ Missing section: $section"
              exit 1
            fi
          done
          
          echo "All ORBT sections present in template"

      - name: Check PR description for ORBT
        uses: actions/github-script@v6
        with:
          script: |
            const prBody = context.payload.pull_request.body || '';
            
            // Check if PR body exists
            if (!prBody || prBody.length < 50) {
              core.setFailed('PR description is too short or missing. Please use the PR template.');
              return;
            }
            
            // Required ORBT sections
            const requiredSections = [
              '## Operate',
              '## Repair', 
              '## Build',
              '## Train'
            ];
            
            const missingSections = [];
            
            for (const section of requiredSections) {
              if (!prBody.includes(section)) {
                missingSections.push(section);
              }
            }
            
            if (missingSections.length > 0) {
              core.setFailed(`Missing ORBT sections: ${missingSections.join(', ')}. Please complete the PR template.`);
              return;
            }
            
            // Check for unchecked required items
            const uncheckedItems = (prBody.match(/- \[ \]/g) || []).length;
            const checkedItems = (prBody.match(/- \[x\]/gi) || []).length;
            
            console.log(`Found ${checkedItems} checked items and ${uncheckedItems} unchecked items`);
            
            // Warn if too many unchecked items
            if (uncheckedItems > 10) {
              core.warning(`There are ${uncheckedItems} unchecked items in the PR description. Please review and check completed items.`);
            }
            
            // Check for placeholder text
            const placeholders = [
              '<!-- Provide a brief summary',
              '<!-- How will this be operated',
              '<!-- How can issues be fixed',
              '<!-- Build and deployment',
              '<!-- Knowledge transfer'
            ];
            
            for (const placeholder of placeholders) {
              if (prBody.includes(placeholder)) {
                core.warning('PR description contains placeholder text. Please replace with actual content.');
                break;
              }
            }
            
            console.log('✅ ORBT sections validation passed');

      - name: Check node-specific requirements
        uses: actions/github-script@v6
        with:
          script: |
            const prBody = context.payload.pull_request.body || '';
            const prTitle = context.payload.pull_request.title || '';
            const branch = context.payload.pull_request.head.ref || '';
            
            // Determine which node this PR is for
            let node = '';
            if (branch.includes('node-1') || prTitle.includes('node-1')) {
              node = 'node-1';
            } else if (branch.includes('node-2') || prTitle.includes('node-2')) {
              node = 'node-2';
            } else if (branch.includes('node-3') || prTitle.includes('node-3')) {
              node = 'node-3';
            } else if (branch.includes('node-4') || prTitle.includes('node-4')) {
              node = 'node-4';
            }
            
            if (node) {
              console.log(`Checking ${node} specific requirements...`);
              
              // Node-specific acceptance criteria
              const nodeRequirements = {
                'node-1': [
                  'unique company_uid',
                  '3 slots',
                  'idempotent'
                ],
                'node-2': [
                  'BIT classification',
                  'template',
                  'doctrine'
                ],
                'node-3': [
                  'API',
                  'scheduler',
                  'rate limit'
                ],
                'node-4': [
                  'gatekeeper',
                  'compliance',
                  'audit'
                ]
              };
              
              const required = nodeRequirements[node] || [];
              const missing = [];
              
              for (const req of required) {
                if (!prBody.toLowerCase().includes(req.toLowerCase())) {
                  missing.push(req);
                }
              }
              
              if (missing.length > 0) {
                core.warning(`Consider addressing these ${node} topics: ${missing.join(', ')}`);
              } else {
                console.log(`✅ All ${node} key topics addressed`);
              }
            }

      - name: Summary
        run: |
          echo "## ORBT Check Summary"
          echo "- ✅ PR template exists"
          echo "- ✅ All ORBT sections present in template"
          echo "- ✅ PR description follows ORBT structure"
          echo ""
          echo "Please ensure all checklist items are addressed before merging."