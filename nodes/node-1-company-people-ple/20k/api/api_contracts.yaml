# Render API Contracts - Expanded (20k)
# Extended API contract with 3 endpoints + auth + idempotency + errors

version: "2.0"
altitude: "20k"
status: "design_specification"

# Authentication & Security
authentication:
  type: "api_key"
  header: "X-API-Key"
  format: "Bearer {api_key}"
  validation:
    key_format: "^rdb_[a-zA-Z0-9]{32}$"
    key_rotation: "90_days"
    rate_limiting: true

# Idempotency Configuration
idempotency:
  header: "Idempotency-Key"
  key_format: "uuid_v4"
  key_expiration: "24_hours"
  conflict_resolution: "return_original_response"

# API Endpoints

## Endpoint 1: Company Operations
companies:
  insert_company:
    method: "POST"
    path: "/api/v1/companies"
    description: "Insert company with auto-generated slots"
    
    headers:
      required:
        - "Content-Type: application/json"
        - "X-API-Key: Bearer {api_key}"
      optional:
        - "Idempotency-Key: {uuid}"
        - "X-Request-ID: {trace_id}"
    
    request_schema:
      type: "object"
      required: ["name"]
      properties:
        name:
          type: "string"
          minLength: 1
          maxLength: 255
          example: "Acme Corporation"
        website:
          type: "string"
          format: "uri"
          example: "https://acme.com"
        apollo_company_id:
          type: "string"
          pattern: "^apollo_[a-zA-Z0-9_]+$"
          example: "apollo_acme_123456"
        ein_raw:
          type: "string"
          pattern: "^\\d{2}-?\\d{7}$"
          example: "12-3456789"
        source:
          type: "string"
          enum: ["apollo", "csv", "manual"]
          default: "manual"
    
    responses:
      "201":
        description: "Company created successfully"
        content:
          application/json:
            schema:
              type: "object"
              properties:
                company_uid:
                  type: "string"
                  pattern: "^CO-\\d{8}-\\d{6}$"
                  example: "CO-20240828-000001"
                status:
                  type: "string"
                  enum: ["created"]
                slots_created:
                  type: "integer"
                  minimum: 3
                  maximum: 3
                  example: 3
                slot_uids:
                  type: "array"
                  items:
                    type: "string"
                    pattern: "^SL-CO-\\d{8}-\\d{6}-(CEO|CFO|HR)$"
                  example: [
                    "SL-CO-20240828-000001-CEO",
                    "SL-CO-20240828-000001-CFO", 
                    "SL-CO-20240828-000001-HR"
                  ]
                created_at:
                  type: "string"
                  format: "date-time"
                  example: "2024-08-28T15:30:00Z"
      
      "200":
        description: "Company already exists (idempotency)"
        content:
          application/json:
            schema:
              type: "object"
              properties:
                company_uid:
                  type: "string"
                status:
                  type: "string"
                  enum: ["exists"]
                message:
                  type: "string"
                  example: "Company already exists with this website"
                slots_ensured:
                  type: "integer"
                  example: 0

## Endpoint 2: People Operations  
people:
  link_person:
    method: "POST"
    path: "/api/v1/people"
    description: "Create person and link to company/slot"
    
    headers:
      required:
        - "Content-Type: application/json"
        - "X-API-Key: Bearer {api_key}"
      optional:
        - "Idempotency-Key: {uuid}"
        - "X-Request-ID: {trace_id}"
    
    request_schema:
      type: "object"
      required: ["name", "email", "company_uid"]
      properties:
        name:
          type: "string"
          minLength: 1
          maxLength: 255
          example: "John Smith"
        email:
          type: "string"
          format: "email"
          maxLength: 255
          example: "john.smith@acme.com"
        company_uid:
          type: "string"
          pattern: "^CO-\\d{8}-\\d{6}$"
          example: "CO-20240828-000001"
        role:
          type: "string"
          maxLength: 100
          example: "Chief Executive Officer"
        target_slot:
          type: "string"
          enum: ["CEO", "CFO", "HR"]
          description: "Preferred slot assignment"
        linkedin_url:
          type: "string"
          format: "uri"
          pattern: "^https://.*linkedin\\.com/.*$"
          example: "https://linkedin.com/in/johnsmith"
        phone:
          type: "string"
          pattern: "^\\+[1-9]\\d{1,14}$"
          example: "+1234567890"
        source:
          type: "string" 
          enum: ["apollo", "csv", "manual", "scraping"]
          default: "manual"
    
    responses:
      "201":
        description: "Person created and linked successfully"
        content:
          application/json:
            schema:
              type: "object"
              properties:
                person_id:
                  type: "string"
                  pattern: "^PE-\\d{8}-\\d{6}$"
                  example: "PE-20240828-000001"
                status:
                  type: "string"
                  enum: ["created"]
                company_link:
                  type: "object"
                  properties:
                    company_uid:
                      type: "string"
                    link_confidence:
                      type: "number"
                      minimum: 0
                      maximum: 100
                      example: 95.5
                slot_assignment:
                  type: "object"
                  properties:
                    slot_uid:
                      type: "string"
                      example: "SL-CO-20240828-000001-CEO"
                    assigned:
                      type: "boolean"
                    conflict_resolved:
                      type: "boolean"
                validation_status:
                  type: "string"
                  enum: ["pending", "queued"]
                  example: "queued"
                created_at:
                  type: "string"
                  format: "date-time"

## Endpoint 3: Validation Operations
validation:
  batch_validate:
    method: "POST"
    path: "/api/v1/validation/batch"
    description: "Submit batch of emails for validation"
    
    headers:
      required:
        - "Content-Type: application/json"
        - "X-API-Key: Bearer {api_key}"
      optional:
        - "Idempotency-Key: {uuid}"
        - "X-Request-ID: {trace_id}"
        
    request_schema:
      type: "object"
      required: ["batch_id", "emails"]
      properties:
        batch_id:
          type: "string"
          pattern: "^batch_\\d{8}_\\d{3}$"
          example: "batch_20240828_001"
        emails:
          type: "array"
          minItems: 1
          maxItems: 1000
          items:
            type: "object"
            required: ["person_id", "email"]
            properties:
              person_id:
                type: "string"
                pattern: "^PE-\\d{8}-\\d{6}$"
              email:
                type: "string"
                format: "email"
              priority:
                type: "string"
                enum: ["high", "medium", "low"]
                default: "medium"
        callback_url:
          type: "string"
          format: "uri"
          example: "https://our-webhook.render.com/validation/callback"
        provider_preference:
          type: "string"
          enum: ["millionverifier", "zerobounce", "auto"]
          default: "auto"
    
    responses:
      "202":
        description: "Batch accepted for processing"
        content:
          application/json:
            schema:
              type: "object"
              properties:
                batch_id:
                  type: "string"
                status:
                  type: "string"
                  enum: ["accepted", "processing"]
                total_emails:
                  type: "integer"
                estimated_completion_minutes:
                  type: "integer"
                estimated_cost:
                  type: "number"
                  format: "currency"
                  example: 2.50
                tracking_url:
                  type: "string"
                  format: "uri"
                  example: "/api/v1/validation/batch/batch_20240828_001/status"

# Error Responses
error_responses:
  "400":
    description: "Bad Request - Invalid input data"
    content:
      application/json:
        schema:
          $ref: "#/components/error_schema"
        examples:
          validation_error:
            summary: "Request validation failed"
            value:
              error_code: "VALIDATION_ERROR"
              message: "Invalid email format"
              details:
                field: "email"
                value: "invalid-email"
                constraint: "format"
              request_id: "req_abc123"
  
  "401":
    description: "Unauthorized - Invalid API key"
    content:
      application/json:
        schema:
          $ref: "#/components/error_schema"
        examples:
          invalid_key:
            summary: "API key invalid"
            value:
              error_code: "INVALID_API_KEY"
              message: "The provided API key is invalid or expired"
              request_id: "req_def456"
  
  "409":
    description: "Conflict - Idempotency conflict"
    content:
      application/json:
        schema:
          $ref: "#/components/error_schema"
        examples:
          idempotency_conflict:
            summary: "Different request with same idempotency key"
            value:
              error_code: "IDEMPOTENCY_CONFLICT"
              message: "Request with same idempotency key has different payload"
              idempotency_key: "550e8400-e29b-41d4-a716-446655440000"
  
  "429":
    description: "Too Many Requests - Rate limit exceeded"
    content:
      application/json:
        schema:
          $ref: "#/components/error_schema"
        examples:
          rate_limited:
            summary: "API rate limit exceeded"
            value:
              error_code: "RATE_LIMIT_EXCEEDED"
              message: "API rate limit exceeded. Try again in 60 seconds"
              retry_after: 60
              request_id: "req_ghi789"
  
  "500":
    description: "Internal Server Error"
    content:
      application/json:
        schema:
          $ref: "#/components/error_schema"
        examples:
          server_error:
            summary: "Internal server error"
            value:
              error_code: "INTERNAL_ERROR"
              message: "An internal server error occurred"
              request_id: "req_jkl012"

# Shared Components
components:
  error_schema:
    type: "object"
    required: ["error_code", "message"]
    properties:
      error_code:
        type: "string"
        description: "Machine-readable error code"
        example: "VALIDATION_ERROR"
      message:
        type: "string"
        description: "Human-readable error message"
        example: "Invalid input data provided"
      details:
        type: "object"
        description: "Additional error context"
      request_id:
        type: "string"
        description: "Unique request identifier for debugging"
        example: "req_abc123"
      timestamp:
        type: "string"
        format: "date-time"
        description: "Error occurrence timestamp"
      retry_after:
        type: "integer"
        description: "Seconds to wait before retrying (for rate limits)"

# Rate Limiting
rate_limits:
  authentication:
    window: "1_minute"
    max_requests: 60
    burst_allowance: 10
  
  by_endpoint:
    "/api/v1/companies":
      window: "1_minute"
      max_requests: 30
    "/api/v1/people":
      window: "1_minute"  
      max_requests: 100
    "/api/v1/validation/batch":
      window: "1_minute"
      max_requests: 10
      daily_limit: 1000

# Monitoring & Observability
monitoring:
  request_logging:
    log_level: "info"
    include_request_body: false
    include_response_body: false
    sensitive_fields: ["X-API-Key"]
  
  metrics:
    - name: "api_requests_total"
      type: "counter"
      labels: ["method", "endpoint", "status_code"]
    - name: "api_request_duration_seconds"
      type: "histogram"
      labels: ["method", "endpoint"]
    - name: "api_errors_total"
      type: "counter" 
      labels: ["error_code", "endpoint"]

# Integration Notes
integration:
  external_dependencies:
    ingester_repo: "https://github.com/djb258/ingest-companies-people"
    scraper_repo: "https://github.com/djb258/scraping-tool.git"
    neon_database: "${NEON_DATABASE_URL}"
  
  webhook_endpoints:
    validation_callback: "https://our-api.render.com/validation/callback"
    error_notifications: "https://our-api.render.com/errors/notify"

# 20k Constraints
implementation_notes: |
  20k Design Specification Only:
  - Complete API contract definition
  - No actual endpoint implementation
  - No database integration
  - No external service calls
  - Mock responses for development/testing
  - Ready for implementation at higher altitudes