-- ─────────────────────────────────────────────
-- 📁 CTB Classification Metadata
-- ─────────────────────────────────────────────
-- CTB Branch: data/migrations
-- Barton ID: 05.01.02
-- Unique ID: CTB-53560FBA
-- Blueprint Hash:
-- Last Updated: 2025-10-23
-- Enforcement: ORBT
-- ─────────────────────────────────────────────

-- SCHEMA: people
CREATE SCHEMA IF NOT EXISTS people;

-- Core contact table (personal-only; company data lives elsewhere)
CREATE TABLE IF NOT EXISTS people.contact (
  contact_unique_id        TEXT PRIMARY KEY,                         -- Barton ID (generated by your gatekeeper)
  company_unique_id        TEXT NOT NULL,                            -- FK to company master
  slot_unique_id           TEXT,                                     -- FK to company slot (CEO/CFO/HR)

  -- Personal identity
  first_name               TEXT NOT NULL,
  last_name                TEXT NOT NULL,
  title                    TEXT,                                     -- e.g., Chief Financial Officer
  seniority                TEXT,                                     -- e.g., C-Level, VP, Director
  department               TEXT,                                     -- e.g., Finance, HR

  -- Direct contact channels
  email                    CITEXT,                                   -- nullable, some contacts are phone-only
  email_status             TEXT,                                     -- e.g., Verified, Bounce, Catch-all
  email_last_verified_at   TIMESTAMPTZ,

  mobile_phone_e164        TEXT,                                     -- +15551234567
  work_phone_e164          TEXT,

  -- Personal social / presence (all optional; blank OK)
  linkedin_url             TEXT,
  x_url                    TEXT,                                     -- Twitter/X
  instagram_url            TEXT,
  facebook_url             TEXT,
  threads_url              TEXT,
  tiktok_url               TEXT,
  youtube_url              TEXT,
  personal_website_url     TEXT,
  github_url               TEXT,
  calendly_url             TEXT,

  -- Optional messaging (often sparse)
  whatsapp_handle          TEXT,
  telegram_handle          TEXT,

  -- Governance & ops
  do_not_contact           BOOLEAN DEFAULT FALSE,
  contact_owner            TEXT,                                     -- SDR/AE owner if used
  source_system            TEXT,                                     -- e.g., 'apollo'
  source_record_id         TEXT,                                     -- vendor-side id for traceability

  created_at               TIMESTAMPTZ DEFAULT now(),
  updated_at               TIMESTAMPTZ DEFAULT now()
);

-- Tie to company & slot (assumes these exist)
ALTER TABLE people.contact
  ADD CONSTRAINT fk_contact_company
  FOREIGN KEY (company_unique_id)
  REFERENCES company.company (company_unique_id)
  ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE people.contact
  ADD CONSTRAINT fk_contact_slot
  FOREIGN KEY (slot_unique_id)
  REFERENCES company.company_slot (slot_unique_id)
  ON UPDATE CASCADE ON DELETE SET NULL;

-- Practical de-duplication: unique per company when email present
CREATE UNIQUE INDEX IF NOT EXISTS ux_contact_company_email
  ON people.contact (company_unique_id, email)
  WHERE email IS NOT NULL;

-- Helpful search indexes
CREATE INDEX IF NOT EXISTS ix_contact_company ON people.contact (company_unique_id);
CREATE INDEX IF NOT EXISTS ix_contact_slot    ON people.contact (slot_unique_id);
CREATE INDEX IF NOT EXISTS ix_contact_name    ON people.contact (last_name, first_name);

-- Timestamp trigger (optional but recommended)
CREATE OR REPLACE FUNCTION people.trgfn_touch_updated_at()
RETURNS TRIGGER AS $
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END; $ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_people_contact_updated_at ON people.contact;
CREATE TRIGGER trg_people_contact_updated_at
BEFORE UPDATE ON people.contact
FOR EACH ROW EXECUTE FUNCTION people.trgfn_touch_updated_at();